#+TITLE: Mac OS Notes
* Applications
** Recommended
- [[https://www.google.com/chrome/][Chrome]]
- [[https://cyberduck.io/][Cyberduck]]
- [[https://dbeaver.io/][DBeaver]]
- [[https://www.devontechnologies.com/apps/devonthink][DevonThink Pro]] (/license needed/)
- [[https://docs.docker.com/docker-for-mac/install/][Docker]]
- [[https://emacsformacosx.com/][Emacs for OS X]]
- [[https://www.mozilla.org/en-US/firefox/new/][Firefox]]
- [[https://jumpdesktop.com/][Jump Desktop]] (/paid/)
- [[http://kablock.com/][Ka-Block!]]
- [[https://www.macports.org/][MacPorts]]
- [[https://www.office.com/][Microsoft Office]] (/license needed/)
- [[https://docs.conda.io/en/latest/miniconda.html][Miniconda]]
- [[https://mos.caldis.me/][Mos]] ([[https://github.com/Caldis/Mos][GitHub]], /independent scroll direction for mice/)
- [[https://github.com/rxhanson/Rectangle][Rectangle]]
- [[https://www.royalapplications.com/ts/mac/features][Royal TSX]]
- [[https://skim-app.sourceforge.io/][Skim]]
- [[https://slack.com/][Slack]]
- [[https://github.com/yihui/tinytex][TinyTeX]]
- [[https://github.com/aahung/Unshaky][Unshaky]] (/double keypress issue workaround for butterfly keyboards/)
** Other useful apps
- [[https://1password.com/][1Password]]
- [[https://bitwarden.com/][BitWarden]]
- [[https://calibre-ebook.com/][Calibre]]
- [[https://discordapp.com/][Discord]]
- [[https://fontforge.org/en-US/][FontForge]]
- [[https://www.gimp.org/][GIMP]]
- [[https://github.com/git-up/GitUp][GitUp]] (/or use [[https://magit.vc/][Magit]] in Emacs/)
- [[https://inkscape.org/][Inkscape]]
- [[https://insomnia.rest/][Insomnia]] (/Core---REST/GraphQL explorer; Designer---API designer/)
- [[https://www.toketaware.com/ithoughts-osx][iThoughts]] (/license needed; available on App Store/)
- [[https://github.com/laurent22/joplin][Joplin]]
- [[https://krita.org/en/][Krita]]
- [[https://www.knime.com/knime-analytics-platform][KNIME]]
- [[https://github.com/pigigaldi/Pock][Pock]]
- [[https://www.postman.com/][Postman]] (/less nice UX than Insomnia; CI/CD support with [[https://github.com/postmanlabs/newman][Newman]]/)
- [[https://github.com/fespinoza/LinkedIdeas][Linked Ideas]] (/like [[https://www.literatureandlatte.com/scapple/overview][Scapple]]; available on App Store/)
- [[https://github.com/hql287/Manta][Manta]]
- [[https://ranchero.com/netnewswire/][NetNewsWire]]
- [[https://openvpn.net/vpn-server-resources/connecting-to-access-server-with-macos/][OpenVPN]]
- [[https://github.com/sveinbjornt/Platypus][Platypus]]
- [[https://eggerapps.at/postico/][Postico]] (/better PostgreSQL UX; some limitations in free version/)
- [[https://qxmledit.org/][QXmlEdit]]
- [[https://racket-lang.org/][Racket]]
- [[https://rstudio.com/][RStudio]] (/requires base R be installed, see below/)
- [[https://github.com/syncthing/syncthing-macos][Syncthing]]
- [[https://tunnelblick.net/][TunnelBlick]] (/OpenVPN alternative/)
- [[https://www.vagrantup.com/][Vagrant]]
- [[https://www.yworks.com/products/yed][yEd]]
- [[https://github.com/Zettlr/Zettlr][Zettlr]]
- [[https://www.zotero.org/][Zotero]]
* Application-specific configuration
** TODO alacritty
** kitty
*** Using Option as Meta or Alt
- Set the ~macos_option_as_alt all~ option in the
  =~/.config/kitty.conf= file (replace ~left~ or ~right~ instead of
  ~all~ to only use the left or right Option key).
*** Syncing the kitty terminfo file to remote systems
- For a new server, options are to ssh in the first time with ~kitty
  +kitten ssh myserver~, to copy over the terminfo file with =infocmp
  xterm-kitty | ssh myserver tic -x -o \~/.terminfo /dev/stdin=, or to
  manually copy over the terminfo file to =~/.terminfo/x/xterm-kitty=
  on the server.
** MacPorts
*** Recommended packages
#+begin_example
aspell
aspell-dict-en
autoconf
automake
bat
clojure
dict
fish
htop
jq
mosh
notmuch
openjdk8 / openjdk11
qpdf
p7zip
pandoc
ripgrep
rlwrap
shellcheck
stow
tmux
unrar
wget
wordnet
xsv
#+end_example
*** Other useful but less used packages
#+begin_example
clusterssh
httrack
lftp
miller
tig
tin
#+end_example
*** Migration process after upgrading to a new version of OS X
- See instructions [[https://trac.macports.org/wiki/Migration][here]].
** friendly interactive shell (fish)
*** Setup
- [[https://github.com/fish-shell/fish-shell][fish]] can be installed via MacPorts.
- Set up terminal to use fish as the shell.
  - For [[https://sw.kovidgoyal.net/kitty/][kitty]], in =~/.config/kitty/kitty.conf=, set the shell to the
    installed fish binary with the ~--login~ option, i.e. add the line
    ~shell /path/to/bin/fish --login~ (modify ~/path/to/bin/fish~ as
    necessary).
  - For [[https://support.apple.com/guide/terminal/welcome/mac][Terminal]] or [[https://www.iterm2.com/][iterm2]], set up a profile that runs ~fish~ on
    start. For example, in the Terminal app open "Preferences >
    Profiles" and create a new profile, enable "Shell > Startup > Run
    Command" and set its value to the installed fish binary (with the
    ~--login~ option as necessary). Set the new profile as the default
    profile.
- [[https://github.com/jorgebucaran/fisher][fisher]] can be used to manage fish packages.
*** Recommended packages
#+begin_example
franciscolourenco/done
jethrokuan/z
jorgebucaran/fish-bax
jorgebucaran/fish-nvm
rafaelrinaldi/pure
#+end_example
- The [[https://github.com/franciscolourenco/done][done fish package]] enables notifications when long running
  processes complete and the terminal window is not in the foreground.
  Add icons to notifications by installing [[https://github.com/julienXX/terminal-notifier][terminal-notifier]], i.e.
  download a release bundle, extract the app to some path (e.g.
  ~/path/to/terminal-notifier.app~), create the following
  =terminal-notifier= wrapper script (change the path as is
  necessary), and put it in one of the ~$PATH~ directories:
#+begin_src sh
#!/bin/bash

# Wrapper for the terminal-notifier app
# https://github.com/julienXX/terminal-notifier

/path/to/terminal-notifier.app/Contents/MacOS/terminal-notifier $@
#+end_src
- The [[https://github.com/jorgebucaran/fish-bax][fish-bax package]] provides a ~bax~ command for running bash
  scripts and replaying the environment changes in fish. For example:
#+begin_example
$ bax source "$HOME/.nix-profile/etc/profile.d/nix.sh"
#+end_example
- The [[https://github.com/jorgebucaran/fish-nvm][fish-nvm package]] provides a pure-fish Node.js version manager.
  For example:
#+begin_example
$ nvm use lts
#+end_example
- The [[https://github.com/jethrokuan/fzf][fzf fish package]] integrates fish with the [[https://github.com/junegunn/fzf][fzf]] tool (which needs
  to be installed on the system). Useful bindings:
| Binding | Description                                        |
|---------+----------------------------------------------------|
| ~C-o~   | Find a file and insert it into the command-line    |
| ~C-r~   | Search command history                             |
| ~M-c~   | Find a sub-directory and cd into it                |
| ~M-S-c~ | Like ~M-c~ but includes hidden directories         |
| ~M-o~   | Find a file and open it using ~$EDITOR~            |
| ~M-S-o~ | Find a file and open it using ~xdg-open~ or ~open~ |
- The [[https://github.com/jethrokuan/z][z fish package]] tracks visited directories, and when called with a
  directory name part jumps to a matching directory with the highest
  frecency rank. For example:
#+begin_example
$ z proj
#+end_example
** Clojure
- Clojure can be installed via MacPorts (install the ~clojure~ and one
  of the ~openjdk*~ packages). Java jar dependencies will be
  downloaded to =~/.m2= after running ~clojure~ the first time.
- For managing builds and dependencies, install ~lein~ which can be
  done manually. See the [[https://leiningen.org/][Leiningen website]] for instructions. Java jar
  dependencies will be downloaded to =~/.lein/self-installs=.
** TinyTex
*** Installation
- It is generally better to do a standalone install via the command line ([[https://yihui.org/tinytex/#for-other-users][link]]).
- Install and remove packages using the ~tlmgr~ command line program ([[https://yihui.org/tinytex/#maintenance][link]]).
- Upgrading TexLive versions are easiest by fullying removing the =~/Library/TinyTex= directory and re-installing the currently installed packages which can be listed using the following command.
#+begin_example
$ tlmgr list | grep -e '^i' | cut -d ' ' -f 2 | sed -e 's/://g' | grep -v 'x86_64-darwin'
#+end_example
- If using the fish shell, add the following to the fish configuration file =~/.config/fish/config.fish= or a file it sources.
#+begin_example
# TinyTex
if test -d $HOME/Library/TinyTeX/bin/x86_64-darwin
    set PATH $HOME/Library/TinyTeX/bin/x86_64-darwin $PATH
end
#+end_example
*** Useful Tex packages
#+begin_example
amsfonts
amsmath
biber
booktabs
capt-of
epstopdf-pkg
fancyhdr
geometry
hyperref
pgf
pgfplots
ulem
wrapfig
xcolor
#+end_example
** R
*** Installing via MacPorts
R can be installed via Macports by running either as root or using ~sudo~.
#+begin_example
$ port install tk +quartz
$ port install R +accelerate +cairo +gcc10 +java +quartz +recommended +tcltk -x11
#+end_example
- The ~accelerate~ variant uses Apple's [[https://developer.apple.com/documentation/accelerate][Accelerate]] framework which
  include linear algebra libraries.
- The ~cairo~ variant is required for image support.
- The ~gcc10~ variant uses MacPorts GCC 10 to compile R.
- The ~java~ variant enables Java support.
- The ~quartz~ variant enables Quartz support. This conflicts with the
  ~x11~ variant, so they can't be both enabled simultaneously.
- The ~recommended~ variant installs a number of recommended packages
  by default.
- The ~tcltk~ variant installs support for TclTk. Note this depends on
  MacPorts ~tk~ which needs to be installed with ~quartz~ variant
  enabled for Quartz support (~+quartz~).
*** RStudio
[[https://rstudio.com/][RStudio]] is an IDE for R. See [[https://support.rstudio.com/hc/en-us/articles/200486138-Changing-R-versions-for-RStudio-desktop][here]] for information on base R
installations required for the IDE.
*** Compiling C programs using Xcode 10+
- From Xcode 10 onwards (i.e. OS X 10.14 onwards), C headers are no
  longer installed to ~/usr/local/include~ rooted at the system root
  ~/~ by default.
- Headers are instead installed to a subsystem rooted at
  ~/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk~ (i.e. at
  ~/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include~).
- Compilation flags need to set to point to the approprate paths for R
  to properly compile C programs using Clang, e.g. see ~.R/Makevars~
  file in this repository.
- For more information, see this [[https://thecoatlessprofessor.com/programming/cpp/r-compiler-tools-for-rcpp-on-macos/][blog post]].
- *Note*: This is handled automatically handled in the [[https://cran.r-project.org/bin/macosx/][official R
  installer]] as well as installation via MacPorts. It only needs to be
  done manually for R installations via specific channels like when
  installing ~r-base~ via [[https://docs.conda.io/en/latest/miniconda.html][conda]].
* Usage tips
- ~Control-Command-Q~ locks the screen.
* Miscellany
** Command line reference
- [[https://github.com/jlevy/the-art-of-command-line][GitHub - jlevy/the-art-of-command-line: Master the command line, in one page]]
- [[https://github.com/Idnan/bash-guide][GitHub - Idnan/bash-guide: A guide to learn bash]]
- [[https://www.datascienceatthecommandline.com/][Data Science at the Command Line]]
** Online tools
- [[https://app.diagrams.net/][diagrams.net]] (/diagramming tool, formerly draw.io/)
** Package lists
- [[https://github.com/agarrharr/awesome-cli-apps][GitHub - agarrharr/awesome-cli-apps]]
- [[https://github.com/jondot/awesome-devenv][GitHub - jondot/awesome-devenv]]
- [[https://github.com/jorgebucaran/awesome-fish][GitHub - jorgebucaran/awesome-fish]]
- [[https://github.com/jaywcjlove/awesome-mac][GitHub - jaywcjlove/awesome-mac]]
- [[https://github.com/herrbischoff/awesome-macos-command-line][GitHub - herrbischoff/awesome-macos-command-line]]
- [[https://github.com/alebcay/awesome-shell][GitHub - alebcay/awesome-shell]]
- [[https://github.com/kahun/awesome-sysadmin][GitHub - kahun/awesome-sysadmin]]
- [[https://github.com/serhii-londar/open-source-mac-os-apps][GitHub - serhii-londar/open-source-mac-os-apps]]
- [[https://github.com/dbohdan/structured-text-tools][GitHub - dbohdan/structured-text-tools]]
** TSV utilities
eBay's [[https://github.com/eBay/tsv-utils][TSV utilities]] provide tooling for filtering, computing
statistics, joining and so on for large tabular data files (CSV, TSV).
Not in MacPorts but the project's Github page provides Linux and MacOS
binary releases that can be extracted to a directory in ~PATH~.
Alternatives are [[https://github.com/johnkerl/miller][miller]] or individual tools like [[https://github.com/BurntSushi/xsv][xsv]] and [[https://github.com/saulpw/visidata][Visidata]].
** Useful nodeJS packages
- HTTP server mocking
  - [[https://github.com/nock/nock][nock]] : more full featured
  - [[https://github.com/stoplightio/prism][Prism]] : more lightweight, can use Postman collections
** Useful Python packages
Easiest to install via conda and create a symlink to the binary in
=~/miniconda3/envs/ENVNAME/bin= (the environment's =bin= directory)
within =~/.local/bin= (or some directory that is in ~PATH~).
- ~glances~: Cross platform system monitoring tool like ~top~ and ~htop~.
- ~mitmproxy~: Interactive HTTPS proxy.
- ~pyinstaller~: Bundles Python application and its dependencies into a single package.
- ~textract~: Wrapper for tools extracting text from several document formats.
- ~visidata~: A command-line multitool for tabular data.
For other good Python packages, see [[https://github.com/vinta/awesome-python][Awesome Python]].
*** Fancy Python REPL
- Command line
  - [[https://ipython.org/][IPython]]
  - [[https://github.com/jupyter/jupyter_console][Jupyter console]] started with the ~jupyter console~ or
    ~jupyter-console~ command (it is IPython with additional
    Jupyter-specific functionality layered on).
- Graphical (GUI or browser-based)
  - [[https://github.com/jupyter/notebook][Jupyter notebook]] started with the ~jupyter notebook~ command.
  - [[https://github.com/jupyter/qtconsole][Jupyter Qtconsole]] started with the ~jupyter qtconsole~ command.
** Useful Rust packages
Rust development packages are easiest to install using Cargo. Cargo
can be installed with MacPorts.
#+begin_example
$ port install cargo
#+end_example
Cargo installs binaries to =~/.cargo/bin= so it needs to be added to path.
For Bash, add to =~/.bash_profile= or =~/.bashrc= the following line.
#+begin_example
export PATH=$HOME/.cargo/bin:$PATH
#+end_example
For fish, add to =~/.config/fish/config.fish= the following line.
#+begin_example
set PATH "$HOME/.cargo/bin" "$PATH"
#+end_example
*** Monolith for saving webpages to a single HTML file
Monolith is a tool for saving complete webpages to a single HTML file
with embedded CSS, images and Javascript. There are binaries for Linux
and Windows, but installing it on Mac OS requires compiling it from
source. The following shows install instructions using MacPorts.
#+begin_example
$ port install openssl
$ port install pkgconfig
$ git clone https://github.com/Y2Z/monolith.git
$ cd monolith
$ make install
#+end_example
** Alternative package managers
Besides MacPorts and Conda, the following package managers could be
useful for reproducible builds or software installation.
- Nix ([[https://nixos.org/][link]], [[https://github.com/NixOS][Github]])
- Spack ([[https://spack.io/][link]], [[https://github.com/spack/spack][Github]])
