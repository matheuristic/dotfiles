#+title: Chrome OS notes
#+author: matheuristic
* Enable Linux apps
Go to Settings > Linux (Beta), and enable.
* Terminal Settings window
~Ctrl-Shift-p~ in the terminal opens the Terminal Settings window.
Suggested settings:
- /Behavior/ \to /Bell/ \to Disable.
- /Behavior/ \to /Show terminal dimensions when resized/ \to Enable.
* Setup dotfiles
Install [[https://www.gnu.org/software/stow/][GNU Stow.]]
#+begin_example
sudo apt install stow
#+end_example
Follow the instructions in =README.md= to set up
symlinks in the home directory to the config files. Make sure to
specify the ~--no-folding~ option to ~stow~ so the directory structure
for the package is created rather than symlinked if it does not exist.

The following example symlinks the fish config files to the
appropriate directory tree in ~$HOME~ using ~stow~, and should be run
from the repository root folder.
#+begin_example
stow -t $HOME --no-folding fish
#+end_example
* Setup Box sync
** Install rclone binary
Static binaries are available from https://rclone.org/downloads/

If using the static binaries, make sure it's somewhere on the ~$PATH~ so it can
be called easily.
#+begin_example
cd .local/bin
ln -s /path/to/rclone
#+end_example
** Configure new rclone remote config for Box
1. Run "rclone config"
2. Select "n" (new remote)
3. Enter a name for the new remote, e.g. "Box"
4. Enter the number associated with Box (number may change with rclone
   versions, it is "6" as of v1.52)
5. Leave blank for client id
6. Leave blank for client secret
7. Leave blank for box config file
8. For box subtype, enter the number associated to act on behalf of
   "user" (or "enterprise" if it is an enterprise account)
9. Enter "n" (No) when asked whether to edit advanced config
10. Enter "y" (Yes) when asked whether to use auto config
11. A Box app web page to give authorization to rclone to access the
    Box account will open (may have to use the alternate URL with host
    127.0.0.1 if the initial redirection does not work). Log in to
    authorize rclone
12. Select "y" (Yes) to indicate the config is ok
** Usage
*** List directories in the top level
#+begin_example
rclone lsd Box:
#+end_example
*** List all files
#+begin_example
rclone ls Box:
#+end_example
*** Mount Box to a given directory
Make sure the mount directory exists.
#+begin_example
mkdir -p ~/Box
#+end_example
Use "rclone mount" to create a FUSE mount. A minimal version follows.
#+begin_example
rclone mount Box: ~/Box
#+end_example
It is generally recommended to mount Box with caching enabled. This
increases compatibility with most other apps since they typically
assume the ability to do simultaneously read/writes to a file, but
comes at the cost of higher disk usage and files only syncing back
remotely (to Box) when closed.
#+begin_example
rclone mount Box: ~/Box --vfs-cache-mode full
#+end_example
For more information, see https://rclone.org/commands/rclone_mount/
*** Unmount mounted Box directory
#+begin_example
fusermount -u ~/Box
#+end_example
** Automount on startup using systemd
*** Systemd service unit configuration file
Save the following to =~/.config/systemd/user/rclone-box.service=
(change ~USERNAME~ and paths in ~ExecStart~ and/or ~ExecStartPost~ as
needed). An alternative configuration where the directory structure,
filenames and attributes are pre-cached and persisted is also included
but commented out (this option is only safe when there are not
multiple users uploading to the remote storage at the same time).
#+begin_example
# ~/.config/systemd/user/rclone-box.service
[Unit]
Description=Box (rclone)
After=

[Service]
Type=notify
# Make sure rclone and mount point exists
ExecStartPre=/usr/bin/test -x /home/USERNAME/.local/bin/rclone
ExecStartPre=/usr/bin/test -d /home/USERNAME/Box
ExecStartPre=/usr/bin/test -w /home/USERNAME/Box
# Mount on start
# The --rc flag starts rclone's remote control service.
# This is pretty useful for the ability to manually refresh
# the directory structure and file attributes before directory
# cache expiry using
# $ rclone rc vfs/refresh --fast-list recursive=true
# ---
###
# Option 1 (standard mount)
###
ExecStart=/home/USERNAME/.local/bin/rclone mount Box: /home/USERNAME/Box --rc --vfs-cache-mode full
###
# Option 2 (persistent cache and pre-caching on startup)
# Increase --attr-timeout, --vfs-cache-max-age and --dir-cache-time
# for more persistent cache. After mounting, pre-caching of the
# directory structure, filenames and attributes is triggered using
# a vfs/refresh command to the remote control API.
# Note that this setup is only safe when there aren't multiple users
# uploading the same file at the same time
###
# ExecStart=/home/USERNAME/.local/bin/rclone mount Box: /home/USERNAME/Box --rc --vfs-cache-mode full --vfs-cache-max-age 720h --dir-cache-time 720h --attr-timeout 1m --poll-interval 30s
# ExecStartPost=/home/USERNAME/.local/bin/rclone rc vfs/refresh recursive=true --rc-addr 127.0.0.1:5572 _async=true
# ---
# Unmount on stop
ExecStop=/bin/fusermount -u /home/USERNAME/Box
# Always restart if the process exists
Restart=always
RestartSec=10

[Install]
WantedBy=default.target
#+end_example
*** Enabling the service to start automatically
#+begin_example
systemctl --user enable rclone-box.service
#+end_example
*** Disabling the service to start automatically
#+begin_example
systemctl --user disable rclone-box.service
#+end_example
*** Starting the service manually
#+begin_example
systemctl --user start rclone-box.service
#+end_example
*** Stopping the service manually
#+begin_example
systemctl --user stop rclone-box.service
#+end_example
*** References
- https://blog.victormendonca.com/2018/05/14/creating-a-simple-systemd-user-service/
* Setup symlinks for bibliography, Org and Zettelkasten folders
#+begin_example
cd
ln -s ~/Box/bib
ln -s ~/Box/org
ln -s ~/Box/zettelkasten
#+end_example
* Install The Unarchiver
This package provides CLI tools ~lsar~ for listing archive contents
and ~unar~ for extracting files from archives.
#+begin_example
sudo apt install unar
#+end_example
* Install build tools
Make sure C/C++ compilation tools are installed.
#+begin_example
sudo apt install build-essential cmake
#+end_example
* Install conda
Download the newest miniconda version for Linux from
https://docs.conda.io/en/latest/miniconda.html (except for
installation on arm64 systems for which miniforge should be downloaded
from https://github.com/conda-forge/miniforge instead).

Follow the instructions to install miniconda or miniforge.

Enable the [[https://conda-forge.org/][conda-forge]] repository if miniconda was installed, which
also sets it to be the highest priority repository by default.
#+begin_example
conda config --add channels conda-forge
conda config --set channel_priority strict
#+end_example
*Note*: strict channel priority is enabled by default in ~conda>=5.0~.

Create a environment for machine-specific tooling that do not require
their own environments (change the name ~myenv~ as desired).

#+begin_example
conda create -n myenv
#+end_example

* Install Emacs
Make sure conda is installed.
#+begin_example
conda activate myenv
conda install emacs
conda deactivate
wget -O ~/.mime.types https://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types
mkdir -p ~/.local/bin && cd ~/.local/bin
ln -s ~/miniconda3/envs/myenv/bin/emacs
ln -s ~/miniconda3/envs/myenv/bin/emacsclient
#+end_example
Download a PNG version of the Emacs icon and save it to
=~/.local/bin/share/icons/emacs.png= (rename as desired).

Create ~/.local/bin/share/applications/emacs.desktop with the
following contents. Change USERNAME and PNG icon path as needed.
#+BEGIN_SRC emacs-lisp
[Desktop Entry]
Version=1.0
Name=Emacs
GenericName=Text Editor
Comment=View and edit files
Exec=/home/USERNAME/miniconda3/envs/myenv/bin/emacs %F
Type=Application
Terminal=false
Categories=Utility;Development;TextEditor;
Icon=/home/USERNAME/.local/share/icons/emacs.png
#+END_SRC

Note that the [[https://github.com/conda-forge/emacs-feedstock][Emacs package in conda-forge]] is compiled with the Lucid
graphical toolkit, so it will not be styled by the active GTK theme.
Note the [[https://emacs.stackexchange.com/questions/33065/on-linux-why-should-one-choose-lucid-over-gtk-gui-for-emacs][pros and cons of using Lucid versus GTK in Emacs]]. In
particular even though using Lucid results in Emacs not looking as
nice, it tends to be more robust against display-related issues.
* Install NVM
Easiest to do a Git install of NVM ([[https://github.com/nvm-sh/nvm#git-install][link]]).
#+begin_example
cd
git clone https://github.com/nvm-sh/nvm.git .nvm
cd .nvm
#+end_example
Run ~git tag~ to see the available release versions. ~git checkout~
the newest release version (tag). For example, if ~v0.35.3~ is the
newest version, then run the following.
#+begin_example
git checkout v0.35.3
#+end_example
Add the following lines to =~/.profile= (recommended), =~/.bashrc= or
=~/.zshrc= to source the NVM startup script during shell startup.
#+begin_example
# NVM
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
#+end_example
Install an LTS version of Node.js.
#+begin_example
nvm install --lts
#+end_example
* Install applications used by Emacs config
- aspell
- aspell english dictionary
- fish shell
- libnotify
- OpenJDK
- ripgrep
#+begin_example
sudo apt install aspell aspell-en fish libnotify-bin openjdk-11-jdk ripgrep
#+end_example
* Install jq
jq is in most distributions' package repositories, but binaries are
available from the [[https://github.com/stedolan/jq][GitHub]] repository under /Releases/. Change the
path, version and target arch below as appropriate.
#+begin_example
wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
chmod +x jq-linux64
cd ~/.local/bin
ln -s /path/to/jq-linux64 jq
#+end_example
* Install monolith
Linux binaries are available from
https://github.com/Y2Z/monolith/releases (change x86_64 to armhf as
necessary).
#+begin_example
wget https://github.com/Y2Z/monolith/releases/download/v2.3.0/monolith-gnu-linux-x86_64
chmod +x monolith-gnu-linux-x86_64
cd ~/.local/bin
ln -s /path/to/monolith-gnu-linux-x86_64 monolith
#+end_example
Another useful utility for downloading websites that supplements
monolith is [[https://www.httrack.com/][HTTrack]].
#+begin_example
sudo apt install httrack
#+end_example
* Install Pandoc
Make sure conda is installed.
#+begin_example
conda activate myenv
conda install pandoc
conda deactivate
mkdir -p ~/.local/bin && cd ~/.local/bin
ln -s ~/miniconda3/envs/myenv/bin/pandoc
#+end_example
Alternatively, download an appropriate [[https://github.com/jgm/pandoc/releases][release binary]] and put it in
one of the ~$PATH~ directories.
* Install ShellCheck
[[https://github.com/koalaman/shellcheck][ShellCheck]] is a static analyzer for Bash and sh scripts.
#+begin_example
conda activate myenv
conda install shellcheck
conda deactivate
cd ~/.local/bin
ln -s ~/miniconda3/envs/myenv/bin/shellcheck
#+end_example
* Install fonts
Create the user fonts directory.
#+begin_example
mkdir ~/.fonts
#+end_example
Copy fonts into the =~/.fonts= directory. The following fonts are needed
for the Emacs config at this [[https://github.com/matheuristic/emacs-config][link]].
- Iosevka SS08
- Iosevka Aile
- All fonts from [[https://github.com/domtronn/all-the-icons.el/tree/master/fonts][all-the-icons]]
- Sarasa Gothic
- Symbola
Rebuild the font cache.
#+begin_example
fc-cache -fv
#+end_example
* Install compilation dependencies for emacs-libvterm
#+begin_example
sudo apt install cmake libtool-bin
#+end_example
* Setup org-protocol
Create the file =~/.local/share/applications/org-protocol.desktop=
with the following contents. Change the ~USERNAME~ and/or paths
in the ~Exec~ and ~Icon~ entries as needed.
#+begin_example
[Desktop Entry]
Name=Org-Protocol
Exec=/home/USERNAME/miniconda3/envs/myenv/bin/emacsclient %u
Type=Application
Terminal=false
MimeType=x-scheme-handler/org-protocol;
Icon=/home/USERNAME/.local/share/icons/emacs.png
#+end_example
Run the following to have ~emacsclient~ be the default handler for
~org-protocol://~ URLs. This will add the appropriate entry to
=~/.config/mimeapps.list= or =~/.local/share/applications.mimeapps.list=.
#+begin_example
xdg-mime default org-protocol.desktop x-scheme-handler/org-protocol
#+end_example
Note that the org-protocol URL handler only works within the Linux
container. The org-protocol handler cannot be triggered from the
Chrome browser Chrome OS into the container, but it can be triggered
from a Firefox browser run from within the container.
* Install Firefox browser
Mainly for org-protocol use, but also an alternative to using Chrome.
#+begin_example
sudo apt install firefox-esr
#+end_example
Recommended extensions to install:
- [[https://github.com/gorhill/uBlock][uBlock Origin]] for list-based blocking of ad networks and trackers.
  Also enable /I am an advanced user/ in the extension settings to
  enable [[https://github.com/gorhill/uBlock/wiki/Dynamic-filtering][dynamic filtering]].
- [[https://privacybadger.org/][Privacy Badger]] for heuristic blocking of trackers.
- [[https://decentraleyes.org/][Decentraleyes]] for local content delivery network emulation (adds
  another layer of privacy protection).
Add the org-protocol bookmarklets as described in the Emacs literate
configuration as needed (requires org-protocol handler be configured).
* Install non-Latin fonts
Option 1 with more complete coverage (more disk space required).
Installs the metapackage that pulls in all the Noto font packages.
#+begin_example
sudo apt install fonts-noto
#+end_example
Option 2 with basic coverage (less disk space required). Installs the
core and basic CJK Noto fonts.
#+begin_example
sudo apt install fonts-noto-core fonts-noto-cjk
#+end_example
* Install z for jumping to frecent directories in Bash
Easiest to clone the z repository and symlink the script. Change the
path within which the repository is cloned as needed.
#+begin_example
cd /path/to
git clone https://github.com/rupa/z.git
#+end_example
Add the following to =~/.bashrc= or a file that it sources.
#+begin_example
. /path/to/z/z.sh
#+end_example
Optionally, add =z.1= to the ~$MANPATH~ as desired.
This involves symlinking man page somewhere
#+begin_example
mkdir -p ~/.local/share/man/man1
cd ~/.local/share/man/man1
ln -s /path/to/z/z.1
#+end_example
and extending ~MANPATH~ in the =~/.bashrc= file by adding something
like the following (note a leading ~:~ is needed to keep the default
~man~ search locations in addition to the specified search paths).
#+begin_example
export MANPATH="$MANPATH:$HOME/.local/share/man"
#+end_example
* Install fish packages
[[https://github.com/jorgebucaran/fisher][Fisher]] is a fish package manager, and can be installed as follows.
#+begin_example
mkdir -p ~/.config/fish/functions
cd ~/.config/fish/functions
wget https://github.com/jorgebucaran/fisher/raw/main/fisher.fish
#+end_example
Examples showing installation of some recommended fish packages.
#+begin_example
fisher add jethrokuan/z
fisher add jorgebucaran/fish-bax
fisher add rafaelrinaldi/pure
#+end_example
* Install DevSkim CLI
DevSkim performs static code analysis for potential security issues
for a broad range of languages including C, C++, Python and SQL.
Download the newest CLI release from the [[https://github.com/microsoft/DevSkim/releases][Devskim Github repository]].
(Change the paths and version numbers below as necessary.)
#+begin_example
wget https://github.com/microsoft/DevSkim/releases/download/v0.4.183/DevSkim_linux_0.4.183.zip
wget https://github.com/microsoft/DevSkim/releases/download/v0.4.183/HASHES.txt
shasum -a 256 DevSkim_linux_0.4.183.zip
#+end_example
Check that the SHA256 hash matches.
Uncompress it, make the =devskim= binary executable and create symlink
to it somewhere in ~$PATH~.
#+begin_example
unzip DevSkim_linux_0.4.183.zip
chmod +x DevSkim_linux_0.4.183/devskim
cd ~/.local/bin
ln -s /path/to/DevSkim_linux_0.4.183/devskim
#+end_example
* Install dictionaries and lexical databases
Aspell (dictionary tool), desired language dictionaries and Wordnet
(lexical database) can be installed from the Debian repositories.
#+begin_example
sudo apt install aspell aspell-en wordnet
#+end_example
* Install LanguageTool
Download the Desktop version from https://languagetool.org/ (or the
newest zip file from the https://languagetool.org/download/ listings),
uncompress it to some folder, and symlinking it in the =~/jars= folder
as follows.
#+begin_example
cd ~/jars
ln -s /path/to/languagetool-commandline.jar
#+end_example
(/Optional/) If disk space allows and the processor is sufficiently
fast, download the 8GB English n-gram data set for LanguageTool from
[[https://languagetool.org/download/ngram-data/][here]] and unzip it to the =~/languagetool/ngram-data= directory.
#+begin_example
mkdir -p ~/languagetool/ngram-data/en
cd ~/languagetool/ngram-data/en
wget https://languagetool.org/download/ngram-data/ngrams-en-20150817.zip
unzip ngrams-en-20150817.zip
rm ngrams-en-20150817.zip
#+end_example
* Install firejail
[[https://firejail.wordpress.com/][Firejail]] provides the ability to run applications in a sandbox.
Installing the recommended packages end up pulling in a lot of
dependencies, so it is probably better to just keep to the base
application and default profiles.
#+begin_example
sudo apt install firejail firejail-profiles --no-install-recommends
#+end_example
Sandbox applications by starting them via the ~firejail~ command.
#+begin_example
firejail [--profile=/path/to/firejail/profile] <command> [<options>]
firejail firefox
firejail vlc
#+end_example
* Install Racket (optional)
If developing in [[https://racket-lang.org/][Racket]], there are several options for installing it:
** System-wide or at the user level (better for development work)
[[https://download.racket-lang.org/][Download]] the installer for the latest version, make it executable
using ~chmod +x~ and install it. Add the Racket bin directory to
~$PATH~ and the man pages directory to ~$MANPATH~ as necessary.
** In a conda environment (better for deployment for build jobs)
Install it in a conda environment from the ~conda-forge~ channel (see
the /Install conda/ section for how to enable the channel). This
installs a minimal version of Racket in that environment.
#+begin_example
conda create -n racket
conda activate racket
conda install racket
#+end_example
For development (rather than deployment or build jobs), install the
packages in the main Racket distribution as well (the options below
run the command non-interactively and auto-installs dependencies;
alternatively run without those options and answer ~a~ to any of the
install dependency prompts). Building dependencies may take a while.
#+begin_example
conda activate racket
raco pkg install --batch --deps search-auto main-distribution
#+end_example
* Install Leiningen (optional)
[[https://leiningen.org/][Leiningen]] is a build automation and dependency management tool for
Clojure projects. To install it, [[https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein][download]] the ~lein~ script, make it
executable using ~chmod +x~ and put it in a ~$PATH~ directory. On the
first invocation, it will download and run the self-installer. A Java
distribution like OpenJDK also needs to be installed.
#+begin_example
mkdir -p ~/packages/leiningen
cd ~/packages/leiningen
wget https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein
chmod +x lein
cd ~/.local/bin
ln -s ~/packages/leiningen/lein
#+end_example
* Install Maven (optional)
[[https://maven.apache.org/][Maven]] is a build automation and dependency management tool for Java
projects. To install it, [[https://maven.apache.org/download.cgi][download]] the binary zip archive (ensure the
checksum matches), uncompress it and add the =bin= directory to
~$PATH~ so its binaries are in the executable search path. A Java
distribution like OpenJDK also needs to be installed.
#+begin_example
mkdir -p ~/packages/maven
cd ~/packages/maven
wget <maven_binary_zip_url>
unzip <maven_binary_zip>
cd ~
ln -s ~/packages/maven/maven-X.Y.Z maven
#+end_example
Continuing on the example above which symlinks uncompressed Maven
folder to =~/maven=, add the following to =~/.profile= (recommended),
=~/.bashrc= or =~/.zshrc= so =~/maven/bin= is in ~$PATH~.
#+begin_example
# Maven
if [ -d "$HOME/maven/bin" ] ; then
    PATH="$HOME/maven/bin:$PATH"
fi
#+end_example
* Install Disk Usage Analyzer/baobab (optional)
Disk Usage Analyzer (also known as baobab) provides a tree and
graphical view into disk usage by the different elements. It is useful
for identifying elements that are using heavy amounts of disk space.
#+begin_example
sudo apt install baobab --no-install-recommends
#+end_example
* Install neuron (optional)
[[https://github.com/srid/neuron][Neuron]] is a zettelkasten app.

Download neuron-linux-bundle (updated nightly) from
https://github.com/srid/neuron/releases/tag/nightly
and symlink it to =neuron= somewhere on the ~$PATH~.
#+begin_example
wget https://github.com/srid/neuron/releases/download/nightly/neuron-linux-bundle
chmod +x neuron-linux-bundle
cd ~/.local/bin
ln -s /path/to/neuron-linux-bundle neuron
#+end_example
* Upgrading Debian packages
#+begin_example
sudo apt update
sudo apt upgrade
#+end_example
* Upgrading conda packages
** Base (if using miniconda)
#+begin_example
conda activate base
conda update -c defaults --all
conda deactivate
#+end_example
*Note*: If using miniforge, just follow the /Current environment/ instructions.
** Specific environments (including base for miniforge)
#+begin_example
conda activate name-of-environment
conda update --all
conda deactivate
#+end_example
* APT usage notes
** Reverse dependencies
Search for the reverse dependencies of some given package ~PACKAGE~
(installed packages directly or indirectly depending on ~PACKAGE~).
#+begin_example
apt-cache rdepends --no-suggests --no-conflicts --no-breaks --no-replaces --no-enhances --installed --recurse PACKAGE
#+end_example
** Install a package without its recommended packages
It can be better to not install recommended dependencies of a package
~PACKAGE~, usually when those recommended dependencies are very heavy.
#+begin_example
apt-get install --no-install-recommends PACKAGE
#+end_example
** Simulate installing a package
Simulate installing a PACKAGE, useful for seeing what changes would be
made by a installing or uninstalling a specific package ~PACKAGE~.
#+begin_example
apt-get install --dry-run PACKAGE
apt-get remove --dry-run PACKAGE
#+end_example
