#+title: Chrome OS notes
#+author: matheuristic
* Enable Linux apps
Go to Settings > Linux (Beta), and enable.
* Terminal Settings window
~Ctrl-Shift-p~ in the terminal opens the Terminal Settings window.
Suggested settings:
- /Behavior/ \to /Bell/ \to Disable.
- /Behavior/ \to /Show terminal dimensions when resized/ \to Enable.
* Setup dotfiles
Install [[https://www.gnu.org/software/stow/][GNU Stow.]]
#+begin_example
sudo apt install stow
#+end_example
Follow the instructions in =README.md= to set up
symlinks in the home directory to the config files. Make sure to
specify the ~--no-folding~ option to ~stow~ so the directory structure
for the package is created rather than symlinked if it does not exist.

The following example symlinks the fish config files to the
appropriate directory tree in ~$HOME~ using ~stow~, and should be run
from the repository root folder.
#+begin_example
stow -t $HOME --no-folding fish
#+end_example
* Setup Box sync
** Install rclone binary
Static binaries are available from https://rclone.org/downloads/

If using the static binaries, make sure it's somewhere on the ~$PATH~ so it can
be called easily.
#+begin_example
cd .local/bin
ln -s /path/to/rclone
#+end_example
** Configure new rclone remote config for Box
1. Run "rclone config"
2. Select "n" (new remote)
3. Enter a name for the new remote, e.g. "Box"
4. Enter the number associated with Box (number may change with rclone
   versions, it is "6" as of v1.52)
5. Leave blank for client id
6. Leave blank for client secret
7. Leave blank for box config file
8. For box subtype, enter the number associated to act on behalf of
   "user" (or "enterprise" if it is an enterprise account)
9. Enter "n" (No) when asked whether to edit advanced config
10. Enter "y" (Yes) when asked whether to use auto config
11. A Box app web page to give authorization to rclone to access the
    Box account will open (may have to use the alternate URL with host
    127.0.0.1 if the initial redirection does not work). Log in to
    authorize rclone
12. Select "y" (Yes) to indicate the config is ok
** Usage
*** List directories in the top level
#+begin_example
rclone lsd Box:
#+end_example
*** List all files
#+begin_example
rclone ls Box:
#+end_example
*** Mount Box to a given directory
Make sure the mount directory exists.
#+begin_example
mkdir -p ~/Box
#+end_example
Use "rclone mount" to create a FUSE mount. A minimal version follows.
#+begin_example
rclone mount Box: ~/Box
#+end_example
It is generally recommended to mount Box with caching enabled. This
increases compatibility with most other apps since they typically
assume the ability to do simultaneously read/writes to a file, but
comes at the cost of higher disk usage and files only syncing back
remotely (to Box) when closed.
#+begin_example
rclone mount Box: ~/Box --vfs-cache-mode full
#+end_example
For more information, see https://rclone.org/commands/rclone_mount/
*** Unmount mounted Box directory
#+begin_example
fusermount -u ~/Box
#+end_example
** Automount on startup using systemd
*** Systemd service unit configuration file
Save the following to =~/.config/systemd/user/rclone-box.service=
(change ~USERNAME~ and paths in ~ExecStart~ and/or ~ExecStartPost~ as
needed). An alternative configuration where the directory structure,
filenames and attributes are pre-cached and persisted is also included
but commented out (this option is only safe when there are not
multiple users uploading to the remote storage at the same time).
#+begin_example
# ~/.config/systemd/user/rclone-box.service
[Unit]
Description=Box (rclone)
After=

[Service]
Type=notify
# Make sure rclone and mount point exists
ExecStartPre=/usr/bin/test -x /home/USERNAME/.local/bin/rclone
ExecStartPre=/usr/bin/test -d /home/USERNAME/Box
ExecStartPre=/usr/bin/test -w /home/USERNAME/Box
# Mount on start
# The --rc flag starts rclone's remote control service.
# This is pretty useful for the ability to manually refresh
# the directory structure and file attributes before directory
# cache expiry using
# $ rclone rc vfs/refresh --fast-list recursive=true
# ---
###
# Option 1 (standard mount)
###
ExecStart=/home/USERNAME/.local/bin/rclone mount Box: /home/USERNAME/Box --rc --vfs-cache-mode full
###
# Option 2 (persistent cache and pre-caching on startup)
# Increase --attr-timeout, --vfs-cache-max-age and --dir-cache-time
# for more persistent cache. After mounting, pre-caching of the
# directory structure, filenames and attributes is triggered using
# a vfs/refresh command to the remote control API.
# Note that this setup is only safe when there aren't multiple users
# uploading the same file at the same time
###
# ExecStart=/home/USERNAME/.local/bin/rclone mount Box: /home/USERNAME/Box --rc --vfs-cache-mode full --vfs-cache-max-age 720h --dir-cache-time 720h --attr-timeout 1m --poll-interval 30s
# ExecStartPost=/home/USERNAME/.local/bin/rclone rc vfs/refresh recursive=true --rc-addr 127.0.0.1:5572 _async=true
# ---
# Unmount on stop
ExecStop=/bin/fusermount -u /home/USERNAME/Box
# Always restart if the process exists
Restart=always
RestartSec=10

[Install]
WantedBy=default.target
#+end_example
*** Enabling the service to start automatically
#+begin_example
systemctl --user enable rclone-box.service
#+end_example
*** Disabling the service to start automatically
#+begin_example
systemctl --user disable rclone-box.service
#+end_example
*** Starting the service manually
#+begin_example
systemctl --user start rclone-box.service
#+end_example
*** Stopping the service manually
#+begin_example
systemctl --user stop rclone-box.service
#+end_example
*** References
- https://blog.victormendonca.com/2018/05/14/creating-a-simple-systemd-user-service/
* Setup Org folders
Create =~/org=, clone the Org agenda and read-it-later folders, and
symlink them to the =~/org/agenda= and =~/org/readitlater= directories.
Change the paths and repository names below as needed.
#+begin_example
mkdir -p ~/org
cd /path/to/my/projects/folder
git clone https://some.git.server/agenda-repo-name.git
git clone https://some.git.server/read-it-later-repo-name.git
cd ~/org
ln -s /path/to/my/projects/folder/agenda-repo-name agenda
ln -s /path/to/my/projects/folder/read-it-later-repo-name readitlater
#+end_example
* Setup symlinks for bibliography
#+begin_example
cd
ln -s ~/Box/bib
#+end_example
* Install dar
[[http://dar.linux.free.fr/][dar (disk archive)]] is an archiving tool for nix platforms. It supports
encryption. Also supports recovery records if [[https://github.com/Parchive/par2cmdline/][par2]] is installed.
#+begin_example
sudo apt install dar
#+end_example
Simple usage examples (archive creation and extraction).
#+begin_example
dar -c backup_file_without_extension -g file1 -g file2 ... -g fileN
dar -x backup_file_without_extension
#+end_example
Use the ~-K~ or ~--key~ option to encrypt the archive. Prefer AES as
it is better vetted.
#+begin_example
dar -c backup_file_without_extension -g file1 -K aes:some_pw_str
#+end_example
Additional documentation is available [[http://dar.linux.free.fr/doc/index.html][here]].
* Install par2
Create recovery records for files with [[https://github.com/Parchive/par2cmdline/][par2]].
#+begin_example
sudo apt install par2
#+end_example
Simple usage examples (create record for, verifying and repairing files).
#+begin_example
par2 create some_files.par2 file1 file2 file3
par2 verify some_files.par2
par2 repair some_files.par2
#+end_example
* Install tmux
[[https://github.com/tmux/tmux][tmux]] is a terminal multiplexer that enables multiple terminal sessions
to be run in the same window and also allows those sessions to be detached, run in the background, and re-attached later.
#+begin_example
sudo apt install tmux
#+end_example
This repository has a tmux config that can be installed with ~stow~.
#+begin_example
stow -t $HOME --no-folding tmux
#+end_example
* Install The Unarchiver
This package provides CLI tools ~lsar~ for listing archive contents
and ~unar~ for extracting files from archives.
#+begin_example
sudo apt install unar
#+end_example
* Install Wayland clipboard tools
ChromeOS uses the Wayland display server, so copying and pasting in
and out of the Crostini container is through the Wayland clipboard.
Generally, this can be done using [[https://github.com/bugaevc/wl-clipboard][wl-clipboard]] (see [[https://www.reddit.com/r/chromeos/comments/kf3fxo/linux_beta_penguin_how_to_copy_file_contents_from/][link]]) version
~2.0.0~ or greater. If the version installable via ~apt~ is less than
this, the [[https://packages.debian.org/sid/wl-clipboard][Debian Sid package]] can be downloaded and installed using
~dpkg~. The following example shows this (replace the version number
as necessary):
#+begin_example
wget http://ftp.us.debian.org/debian/pool/main/w/wl-clipboard/wl-clipboard_2.0.0-1_amd64.deb -O wl-clipboard.deb
sudo dpkg -i wl-clipboard.deb
#+end_example
Note that the Crostini terminal has native support for doing this
manually, where selecting a region using a mouse will copy to the
Wayland clipboard from the terminal and ~C-S-v~ will paste from the
Wayland clipboard into the terminal. Some programs like Emacs also
support copy and pasting from the Wayland clipboard automatically.
* Install build tools
Make sure C/C++ compilation tools are installed.
#+begin_example
sudo apt install build-essential cmake
#+end_example
* Install conda
Download the appropriate version of [[https://github.com/conda-forge/miniforge][miniforge]] which uses the
[[https://conda-forge.org/][conda-forge]] repository by default. An alternative is [[https://docs.conda.io/en/latest/miniconda.html][miniconda]] which
uses Anaconda's repository by default.

Follow the instructions to install miniconda or miniforge.

If using miniconda, enable the [[https://conda-forge.org/][conda-forge]] repository as follows,
which also sets it as the highest priority repository by default.
#+begin_example
conda config --add channels conda-forge
conda config --set channel_priority strict
#+end_example
*Note*: strict channel priority is enabled by default in ~conda>=5.0~.

Next, create a environment for machine-specific tooling that do not
require their own environments (change the name ~myenv~ as desired).
#+begin_example
conda create -n myenv
#+end_example

The following sections assume miniforge installed to the default
directory =~/miniforge3/=. (The default directory for miniconda
is =~/miniconda3/= if that is installed instead.)
* Install Emacs
Make sure conda is installed.
#+begin_example
conda activate myenv
conda install emacs
conda deactivate
wget -O ~/.mime.types https://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types
mkdir -p ~/.local/bin && cd ~/.local/bin
ln -s ~/miniforge3/envs/myenv/bin/emacs
ln -s ~/miniforge3/envs/myenv/bin/emacsclient
#+end_example
Download a PNG version of the Emacs icon and save it to
=~/.local/bin/share/icons/emacs.png= (rename as desired).

Create ~/.local/bin/share/applications/emacs.desktop with the
following contents. Change USERNAME and PNG icon path as needed.
#+BEGIN_SRC emacs-lisp
[Desktop Entry]
Version=1.0
Name=Emacs
GenericName=Text Editor
Comment=View and edit files
Exec=/home/USERNAME/miniforge3/envs/myenv/bin/emacs %F
Type=Application
Terminal=false
Categories=Utility;Development;TextEditor;
Icon=/home/USERNAME/.local/share/icons/emacs.png
#+END_SRC
* Install NVM
Easiest to do a Git install of NVM ([[https://github.com/nvm-sh/nvm#git-install][link]]).
#+begin_example
cd
git clone https://github.com/nvm-sh/nvm.git .nvm
cd .nvm
#+end_example
Run ~git tag~ to see the available release versions. ~git checkout~
the newest release version (tag). For example, if ~v0.35.3~ is the
newest version, then run the following.
#+begin_example
git checkout v0.35.3
#+end_example
Add the following lines to =~/.profile= (recommended), =~/.bashrc= or
=~/.zshrc= to source the NVM startup script during shell startup.
#+begin_example
# NVM
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
#+end_example
Install an LTS version of Node.js.
#+begin_example
nvm install --lts
#+end_example
* Install applications used by Emacs config
- aspell
- aspell english dictionary
- fish shell
- libnotify
- OpenJDK
- ripgrep
#+begin_example
sudo apt install aspell aspell-en fish libnotify-bin openjdk-11-jdk ripgrep
#+end_example
* Install jq
jq is in most distributions' package repositories, but binaries are
available from the [[https://github.com/stedolan/jq][GitHub]] repository under /Releases/. Change the
path, version and target arch below as appropriate.
#+begin_example
wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
chmod +x jq-linux64
cd ~/.local/bin
ln -s /path/to/jq-linux64 jq
#+end_example
* Install monolith
Linux binaries are available from
https://github.com/Y2Z/monolith/releases (change x86_64 to armhf as
necessary).
#+begin_example
wget https://github.com/Y2Z/monolith/releases/download/v2.3.0/monolith-gnu-linux-x86_64
chmod +x monolith-gnu-linux-x86_64
cd ~/.local/bin
ln -s /path/to/monolith-gnu-linux-x86_64 monolith
#+end_example
Another useful utility for downloading websites that supplements
monolith is [[https://www.httrack.com/][HTTrack]].
#+begin_example
sudo apt install httrack
#+end_example
* Install MuPDF
[[https://www.mupdf.com/][MuPDF]] is a lightweight PDF and E-book viewer. Available in the Debian
repos, but the following installs a newer version from conda-forge
instead.
#+begin_example
conda activate myenv
conda install mupdf
conda deactivate
mkdir -p ~/.local/bin && cd ~/.local/bin
ln -s ~/miniforge3/envs/myenv/bin/mupdf
#+end_example
Some programs use the mailcap file to determine what programs to run.
If such programs are used, add the following line to the =~/.mailcap=
file (create it if it does not exist; modify the ~-r~ value to the
appropriate resolution DPI value).
#+begin_example
application/pdf;$HOME/.local/bin/mupdf-gl -r 196 '%s'
#+end_example
* Install Pandoc
Make sure conda is installed.
#+begin_example
conda activate myenv
conda install pandoc
conda deactivate
mkdir -p ~/.local/bin && cd ~/.local/bin
ln -s ~/miniforge3/envs/myenv/bin/pandoc
#+end_example
Alternatively, download an appropriate [[https://github.com/jgm/pandoc/releases][release binary]] and put it in
one of the ~$PATH~ directories.
* Install ShellCheck
[[https://github.com/koalaman/shellcheck][ShellCheck]] is a static analyzer for Bash and sh scripts.
#+begin_example
conda activate myenv
conda install shellcheck
conda deactivate
cd ~/.local/bin
ln -s ~/miniforge3/envs/myenv/bin/shellcheck
#+end_example
* Install fonts
Create the user fonts directory.
#+begin_example
mkdir ~/.fonts
#+end_example
Copy fonts into the =~/.fonts= directory. The following fonts are needed
for the Emacs config at this [[https://github.com/matheuristic/emacs-config][link]].
- Iosevka SS08
- Iosevka Aile
- All fonts from [[https://github.com/domtronn/all-the-icons.el/tree/master/fonts][all-the-icons]]
- Sarasa Gothic
- Symbola
Rebuild the font cache.
#+begin_example
fc-cache -fv
#+end_example
* Install compilation dependencies for emacs-libvterm
#+begin_example
sudo apt install cmake libtool-bin
#+end_example
* Install pikchr
[[https://pikchr.org/][Pikchr]] is a [[https://en.wikipedia.org/wiki/Pic_language][PIC]]-like markup language for diagramming, intended for
embedding in fenced code blocks within other markup language
documents.
To install:
1. Make sure ~build-essentials~ is installed via APT as GCC is
   required to compile the source code.
2. Download the latest source code tarball from the [[https://pikchr.org/home/info?name=trunk][code repository]].
   (Replace =<hash>= below with the hash of the latest check-in.)
3. Compile using ~make~.
4. Copy/symlink the ~lemon~ and ~pikchr~ binaries to a ~$PATH~ dir.
#+begin_example
wget https://pikchr.org/home/tarball/<hash>/pikchr-<hash>.tar.gz
tar xzf pikchr-<hash>.tar.gz
cd pikchr-<hash>
make
cd ~/.local/bin
ln -s /path/to/pikchr-<hash>/lemon
ln -s /path/to/pikchr-<hash>/pikchr
#+end_example
* Setup org-protocol
Create the file =~/.local/share/applications/org-protocol.desktop=
with the following contents. Change the ~USERNAME~ and/or paths
in the ~Exec~ and ~Icon~ entries as needed.
#+begin_example
[Desktop Entry]
Name=Org-Protocol
Exec=/home/USERNAME/miniforge3/envs/myenv/bin/emacsclient %u
Type=Application
Terminal=false
MimeType=x-scheme-handler/org-protocol;
Icon=/home/USERNAME/.local/share/icons/emacs.png
#+end_example
Run the following to have ~emacsclient~ be the default handler for
~org-protocol://~ URLs. This will add the appropriate entry to
=~/.config/mimeapps.list= or =~/.local/share/applications.mimeapps.list=.
#+begin_example
xdg-mime default org-protocol.desktop x-scheme-handler/org-protocol
#+end_example
Note that the org-protocol URL handler only works within the Linux
container. The org-protocol handler cannot be triggered from the
Chrome browser Chrome OS into the container, but it can be triggered
from a Firefox browser run from within the container.
* Install Firefox browser
Mainly for org-protocol use, but also an alternative to using Chrome.
#+begin_example
sudo apt install firefox-esr
#+end_example
Recommended extensions to install:
- [[https://github.com/gorhill/uBlock][uBlock Origin]] for list-based blocking of ad networks and trackers.
  Also enable /I am an advanced user/ in the extension settings to
  enable [[https://github.com/gorhill/uBlock/wiki/Dynamic-filtering][dynamic filtering]].
- [[https://privacybadger.org/][Privacy Badger]] for heuristic blocking of trackers.
- [[https://decentraleyes.org/][Decentraleyes]] for local content delivery network emulation (adds
  another layer of privacy protection).
Add the org-protocol bookmarklets as described in the Emacs literate
configuration as needed (requires org-protocol handler be configured).
* Install non-Latin fonts
Option 1 with more complete coverage (more disk space required).
Installs the metapackage that pulls in all the Noto font packages.
#+begin_example
sudo apt install fonts-noto
#+end_example
Option 2 with basic coverage (less disk space required). Installs the
core and basic CJK Noto fonts.
#+begin_example
sudo apt install fonts-noto-core fonts-noto-cjk
#+end_example
* Install z for jumping to frecent directories in Bash
Easiest to clone the z repository and symlink the script. Change the
path within which the repository is cloned as needed.
#+begin_example
cd /path/to
git clone https://github.com/rupa/z.git
#+end_example
Add the following to =~/.bashrc= or a file that it sources.
#+begin_example
. /path/to/z/z.sh
#+end_example
Optionally, add =z.1= to the ~$MANPATH~ as desired.
This involves symlinking man page somewhere
#+begin_example
mkdir -p ~/.local/share/man/man1
cd ~/.local/share/man/man1
ln -s /path/to/z/z.1
#+end_example
and extending ~MANPATH~ in the =~/.bashrc= file by adding something
like the following (note a leading ~:~ is needed to keep the default
~man~ search locations in addition to the specified search paths).
#+begin_example
export MANPATH="$MANPATH:$HOME/.local/share/man"
#+end_example
* Install fish packages
[[https://github.com/jorgebucaran/fisher][Fisher]] is a fish package manager, and can be installed as follows.
#+begin_example
mkdir -p ~/.config/fish/functions
cd ~/.config/fish/functions
wget https://github.com/jorgebucaran/fisher/raw/main/fisher.fish
#+end_example
Examples showing installation of some recommended fish packages.
#+begin_example
fisher add edc/bass
fisher add jethrokuan/z
fisher add pure-fish/pure
fisher add FabioAntunes/fish-nvm
#+end_example
[[https://github.com/FabioAntunes/fish-nvm][fish-nvm]] in the example packages above requires [[https://github.com/nvm-sh/nvm][NVM]] be installed.
* Install bat
[[https://github.com/sharkdp/bat][bat]] is a cat clone with syntax highlighting. Change the conda
environment and paths below as needed.
#+begin_example
conda activate myenv
conda install bat
conda deactivate
ln -s $HOME/miniforge3/envs/myenv/bin/bat $HOME/.local/bin/bat
#+end_example
* Install fzf
[[https://github.com/junegunn/fzf][fzf]] is a command-line fuzzy finder. Change the fzf version and paths
below as appropriate.
#+begin_example
conda activate myenv
conda install fzf
conda deactivate
ln -s $HOME/miniforge3/envs/myenv/bin/fzf $HOME/.local/bin/fzf
#+end_example
* Install DevSkim CLI
DevSkim performs static code analysis for potential security issues
for a broad range of languages including C, C++, Python and SQL.
Download the newest CLI release from the [[https://github.com/microsoft/DevSkim/releases][Devskim Github repository]].
(Change the paths and version numbers below as necessary.)
#+begin_example
wget https://github.com/microsoft/DevSkim/releases/download/v0.4.183/DevSkim_linux_0.4.183.zip
wget https://github.com/microsoft/DevSkim/releases/download/v0.4.183/HASHES.txt
shasum -a 256 DevSkim_linux_0.4.183.zip
#+end_example
Check that the SHA256 hash matches.
Uncompress it, make the =devskim= binary executable and create symlink
to it somewhere in ~$PATH~.
#+begin_example
unzip DevSkim_linux_0.4.183.zip
chmod +x DevSkim_linux_0.4.183/devskim
cd ~/.local/bin
ln -s /path/to/DevSkim_linux_0.4.183/devskim
#+end_example
* Install dictionaries and lexical databases
Aspell (dictionary tool), desired language dictionaries and Wordnet
(lexical database) can be installed from the Debian repositories.
#+begin_example
sudo apt install aspell aspell-en wordnet
#+end_example
* Install LanguageTool
Download the Desktop version from https://languagetool.org/ (or the
newest zip file from the https://languagetool.org/download/ listings),
uncompress it to some folder, and symlinking it in the =~/jars= folder
as follows.
#+begin_example
cd ~/jars
ln -s /path/to/languagetool-commandline.jar
#+end_example
(/Optional/) If disk space allows and the processor is sufficiently
fast, download the 8GB English n-gram data set for LanguageTool from
[[https://languagetool.org/download/ngram-data/][here]] and unzip it to the =~/languagetool/ngram-data= directory.
#+begin_example
mkdir -p ~/languagetool/ngram-data/en
cd ~/languagetool/ngram-data/en
wget https://languagetool.org/download/ngram-data/ngrams-en-20150817.zip
unzip ngrams-en-20150817.zip
rm ngrams-en-20150817.zip
#+end_example
* Install Plan 9 from User Space
[[https://9fans.github.io/plan9port/][Plan 9 from User Space]] (plan9port, [[https://github.com/9fans/plan9port][Github]]) is a port of several [[http://9p.io/plan9/][Plan 9]]
tools to *nix systems.
#+begin_example
sudo apt install libfontconfig1-dev libx11-dev libxext-dev libxt-dev
mkdir $HOME/packages
cd $HOME/packages
git clone https://github.com/9fans/plan9port.git
cd plan9port
./INSTALL
#+end_example
Follow the instructions to add the Plan 9 from User Space binaries to
the paths for the main shell used if desired. Symlink the helper
scripts using ~stow~ from the root of this repository.
#+begin_example
stow -t $HOME --no-folding plan9port
#+end_example
This should create the symlinks to the launch scripts
=~/.local/bin/rc.sh= (launcher for the Plan 9 shell ~rc~),
=~/.local/bin/acme.rc= (launcher for [[http://acme.cat-v.org/][Acme]]) and =~/.local/bin/acme.sh=
(wrapper to use =rc.sh= to run =acme.rc=), and the =~/.acme/bin/=
directory containing symlinks to various helper scripts for Acme. To
create a dock menu item for Acme, create a scaled down version of
=mac/spaceglenda.png= in the plan9port repository (at resolution
240x240), save it to =~/.local/share/icons/spaceglenda240.png= and
create the [[https://www.freedesktop.org/wiki/][freedesktop.org]] desktop entry specification file at
=~/.local/share/applications/acme.desktop= with the following
contents.
#+begin_example
[Desktop Entry]
Name=Acme
Comment=A text editor that is the successor of sam
GenericName=Text Editor
Exec=/home/thiam/.local/bin/acme.sh -f /mnt/font/Iosevka-Slab/21a/font -F /mnt/font/Iosevka-Fixed-Slab/21a/font %f
TryExec=/home/thiam/.local/bin/acme.sh
Icon=/home/thiam/.local/share/icons/spaceglenda240.png
Categories=Utility;Development;TextEditor;
Terminal=false
Type=Application
Version=1.0
#+end_example
Note that Plan 9 also comes with another editor [[http://sam.cat-v.org/][Sam]] (which has a [[https://github.com/deadpixi/sam][fork]] with more features) which supports a client-server model that can be less latency-sensitive for remote file editing.
* Install Kakoune (optional)
[[https://kakoune.org/][Kakoune]] is a modern editor inspired by Vim. Use ~stow~ to install the
~kakoune~ config files.
#+begin_example
stow -t $HOME --no-folding kakoune
#+end_example
For an up-to-date version, build from [[https://github.com/mawww/kakoune][source]]. This requires the
following Debian packages be installed.
#+begin_example
sudo apt install build-essential libncurses-dev git
#+end_example
Clone the repository, git out the latest stable version, build the
binaries and install it. The instructions below install the binaries
to the ~$HOME/.local~ prefix directory, so change it as needed.
Alternatively, use the provided ~install-kakoune.sh~ script in the
Kakoune config directory which does the steps below.
#+begin_example
git clone https://github.com/mawww/kakoune.git
cd kakoune/src
make
make man
PREFIX=$HOME/.local make install
cd ../..
rm -rf kakoune
#+end_example
Download the latest [[https://github.com/kak-lsp/kak-lsp][kak-lsp]] binary and copy it to a path location. The
instructions below installs ~kak-lsp~ binary to ~$HOME/.local~ so
change it as needed. Alternatively, use the provided
~install-kak-lsp.sh~ script in the Kakoune config directory which does
the steps below.
#+begin_example
mkdir tmp-kak-lsp && cd tmp-kak-lsp
wget https://github.com/kak-lsp/kak-lsp/releases/download/v10.0.0/kak-lsp-v10.0.0-x86_64-unknown-linux-musl.tar.gz -O kak-lsp.tar.gz
tar xzf kak-lsp.tar.gz
mv kak-lsp $HOME/.local/bin
cd .. && rm -rf tmp-kak-lsp
#+end_example
Any required [[https://microsoft.github.io/language-server-protocol/][LSP]] servers should be installed manually (e.g. [[https://github.com/microsoft/pyright][Pyright]]
should be installed using [[https://www.npmjs.com/][npm]], in turn best installed using [[https://github.com/nvm-sh/nvm][NVM]]). It
is also highly recommended to install and run Kakoune (~kak~) from
within a Tmux session. Additionally, the provided configuration uses
~nnn~ for a side bar file browser and ~shellcheck~ for linting shell
scripts, so install those as appropriate.
* Install firejail (optional)
[[https://firejail.wordpress.com/][Firejail]] provides the ability to run applications in a sandbox.
Installing the recommended packages end up pulling in a lot of
dependencies, so it is probably better to just keep to the base
application and default profiles.
#+begin_example
sudo apt install firejail firejail-profiles --no-install-recommends
#+end_example
Sandbox applications by starting them via the ~firejail~ command.
#+begin_example
firejail [--profile=/path/to/firejail/profile] <command> [<options>]
firejail firefox
firejail vlc
#+end_example
* Install tig (optional)
[[https://github.com/jonas/tig][tig]] is a text-mode interface to [[https://git-scm.com/][git]].
#+begin_example
sudo apt install tig
#+end_example
* Install J (optional)
For development in [[https://www.jsoftware.com/][J]], install and configure the interpreter.

Download the release in zip form for Linux, extract it to a target
directory , and symlink the =jconsole= binary to =ijconsole= (as
=jconsole= is also the name of the Java console) in a directory
somewhere on the ~$PATH~. (J version ~j902~, =$HOME/packages/j= for
the install path, =$HOME/.local/bin= for the directory on the ~$PATH~
are assumed below, change as needed.)
#+begin_example
$ mkdir -p $HOME/packages/j
$ cd $HOME/packages/j
$ wget http://some/url/for/j902_linux64.tar.gz
$ tar xzf j902_linux64.tar.gz
$ rm -f latest && ln -s j902 latest
$ cd $HOME/.local/bin
$ ln -s $HOME/packages/j/latest/bin/jconsole ijconsole
#+end_example

Make sure libraries are installed. Start =$HOME/packages/j/latest/bin/jconsole= and run the following.
#+begin_example
   install 'all'
   exit''
#+end_example

Install the required system libraries for the J QT IDE. The following installs the Qt libraries in the ~myenv~ conda environment, so change as needed.
#+begin_example
$ sudo apt install libpci3
$ conda activate myenv
$ conda install qt
$ conda deactivate
#+end_example

Make sure J Qt IDE libraries are updated.
#+begin_example
$ cd $HOME/packages/j/latest
$ ./updatejqt.sh
#+end_example

Create a script =$HOME/.local/bin/jqt= with the following contents for
easier launching of the J Qt IDE. Change the script path to somewhere
else on the ~$PATH~ or the contents of the script (typically
~CONDA_INSTALL_DIR~, ~CONDA_QT_ENV~ or ~J_BIN_PATH~) as needed.
#+begin_example
#!/bin/bash

# Run JQt
# - The Qt IDE must already be installed (run updatejqt.sh from the install directory)
# - libpci3 must be installed (Debian and Debian-derivatives)
# - qt must be installed (via conda using the conda-forge channel)
# - Set CONDA_INSTALL_DIR to the install directory for conda
# - Set CONDA_QT_ENV below to the conda environment where Qt is installed
# - Set J_BIN_PATH below to the path of the jqt binary
# - Put this file or a symlink to it in one of the directories on $PATH

CONDA_INSTALL_DIR=$HOME/miniconda3
CONDA_QT_ENV=myenv
J_BIN_PATH=$HOME/packages/j/latest/bin/jqt

LD_LIBRARY_PATH="$CONDA_INSTALL_DIR/envs/$CONDA_QT_ENV/lib:$LD_LIBRARY_PATH" "$J_BIN_PATH" "$@"
#+end_example

Create a file =$HOME/.local/share/applications/jqt.desktop= with the
following contents, changing ~USERNAME~ to the current user name and
the paths as needed.
#+begin_example
[Desktop Entry]
Version=1.0
Name=JQt
GenericName=Integrated Development Environment
Comment=Development environment for J projects
Exec=/home/USERNAME/.local/bin/jqt %F
Type=Application
Terminal=false
Categories=Utility;Development;IDE;
Icon=/home/USERNAME/packages/j/latest/bin/icons/jgreen.png
#+end_example
* Install Racket (optional)
If developing in [[https://racket-lang.org/][Racket]], there are several options for installing it:
** System-wide or at the user level (better for development work)
[[https://download.racket-lang.org/][Download]] the installer for the latest version, make it executable
using ~chmod +x~ and install it. Add the Racket bin directory to
~$PATH~ and the man pages directory to ~$MANPATH~ as necessary.
** In a conda environment (better for deployment for build jobs)
Install it in a conda environment from the ~conda-forge~ channel (see
the /Install conda/ section for how to enable the channel). This
installs a minimal version of Racket in that environment.
#+begin_example
conda create -n racket
conda activate racket
conda install racket
#+end_example
For development (rather than deployment or build jobs), install the
packages in the main Racket distribution as well (the options below
run the command non-interactively and auto-installs dependencies;
alternatively run without those options and answer ~a~ to any of the
install dependency prompts). Building dependencies may take a while.
#+begin_example
conda activate racket
raco pkg install --batch --deps search-auto main-distribution
#+end_example
* Install Leiningen (optional)
[[https://leiningen.org/][Leiningen]] is a build automation and dependency management tool for
Clojure projects. To install it, [[https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein][download]] the ~lein~ script, make it
executable using ~chmod +x~ and put it in a ~$PATH~ directory. On the
first invocation, it will download and run the self-installer. A Java
distribution like OpenJDK also needs to be installed.
#+begin_example
mkdir -p ~/packages/leiningen
cd ~/packages/leiningen
wget https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein
chmod +x lein
cd ~/.local/bin
ln -s ~/packages/leiningen/lein
#+end_example
* Install Maven (optional)
[[https://maven.apache.org/][Maven]] is a build automation and dependency management tool for Java
projects. To install it, [[https://maven.apache.org/download.cgi][download]] the binary zip archive (ensure the
checksum matches), uncompress it and add the =bin= directory to
~$PATH~ so its binaries are in the executable search path. A Java
distribution like OpenJDK also needs to be installed.
#+begin_example
mkdir -p ~/packages/maven
cd ~/packages/maven
wget <maven_binary_zip_url>
unzip <maven_binary_zip>
cd ~
ln -s ~/packages/maven/maven-X.Y.Z maven
#+end_example
Continuing on the example above which symlinks uncompressed Maven
folder to =~/maven=, add the following to =~/.profile= (recommended),
=~/.bashrc= or =~/.zshrc= so =~/maven/bin= is in ~$PATH~.
#+begin_example
# Maven
if [ -d "$HOME/maven/bin" ] ; then
    PATH="$HOME/maven/bin:$PATH"
fi
#+end_example
* Install Disk Usage Analyzer/baobab (optional)
Disk Usage Analyzer (also known as baobab) provides a tree and
graphical view into disk usage by the different elements. It is useful
for identifying elements that are using heavy amounts of disk space.
#+begin_example
sudo apt install baobab --no-install-recommends
#+end_example
* Install nnn (optional)
[[https://github.com/jarun/nnn][nnn]] is a terminal file manager. It is typically installable via the
system package manager, but can also be installed using conda (see
below, modify as appropriate). There are also [[https://github.com/jarun/nnn/tree/master/plugins][plugins]] available.
#+begin_example
conda activate myenv
conda install nnn
conda deactivate
mkdir -p $HOME/.local/bin
ln -s $HOME/miniforge3/envs/myenv/bin/nnn $HOME/.local/bin/nnn
#+end_example
* Upgrading Debian packages
#+begin_example
sudo apt update
sudo apt upgrade
#+end_example
* Upgrading conda packages
** Base (if using miniconda)
#+begin_example
conda activate base
conda update -c defaults --all
conda deactivate
#+end_example
*Note*: If using miniforge, just follow the /Specific environments/ instructions.
** Specific environments (including base for miniforge)
#+begin_example
conda activate name-of-environment
conda update --all
conda deactivate
#+end_example
* APT usage notes
** Reverse dependencies
Search for the reverse dependencies of some given package ~PACKAGE~
(installed packages directly or indirectly depending on ~PACKAGE~).
#+begin_example
apt-cache rdepends --no-suggests --no-conflicts --no-breaks --no-replaces --no-enhances --installed --recurse PACKAGE
#+end_example
** Install a package without its recommended packages
It can be better to not install recommended dependencies of a package
~PACKAGE~, usually when those recommended dependencies are very heavy.
#+begin_example
apt-get install --no-install-recommends PACKAGE
#+end_example
** Simulate installing a package
Simulate installing a PACKAGE, useful for seeing what changes would be
made by a installing or uninstalling a specific package ~PACKAGE~.
#+begin_example
apt-get install --dry-run PACKAGE
apt-get remove --dry-run PACKAGE
#+end_example
