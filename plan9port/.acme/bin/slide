#!/usr/bin/env rc
# A clone of Russ Cox's slide program. When invoked with no arguments, it opens the '1' file in the window's directory in a new row. The Slide+ and Slide- commands navigate between slides. The window closes after the last slide.
# 
# When button2 is pressed within a slide, the current slide's body is searched for an rc function definition whose name matches the queried text. These rc functions are then executed within slide's own environment.
# 
# Newly-defined macros become executable after reloading a slide via the Get or Slide[+-] commands.
#
# Author: mvk <mvk@moriendi.org>
#
# This is free and unencumbered software released into the public domain. See https://moriendi.org/tools/_LICENSE
. $PLAN9/lib/acme.rc
prog=`{echo $0 | xargs basename}
dir=$%
if (~ $1 '') sliden='1'
if not sliden=`{echo $1 | xargs basename} # 2-1 chord on slide in awd gives full file path

## Window manipulation
fn init {
	newwindow
	echo -n 'Get Slide- Slide+'	| winwrite tag
	winname $dir^$sliden
}

fn addr {
	echo -n $"*	| winwrite addr
}

fn loadordie {
	if (! test -r $dir^$sliden) winctl delete
	if not {
		winname $dir^$sliden
		winctl clean
		winctl get
		getmacronames
	}
}

## macro bookkeeping
fn getmacronames {
	macros=`{winread body | ssam -n ',x/^fn [^ \n]+ *{ *$/' | sed 's/{?fn//g; s/{$//'} # ugly
}

fn ismacro {
	f=0
	for (macro in $macros)
		if (~ $macro $1) f=1

	if (~ $f 1) true
	if not false
}

fn execmacro {
	old_ifs=$ifs; ifs=''
	instructions=`{winread body | ssam -n '/^fn '$1' *{ *$/+;/^} *$/-p' }
	ifs=$old_ifs

	rc -c $"instructions
}

## button3 events
fn Slide+ {
	sliden=`{echo $sliden^'+1' | bc}
	loadordie
}

fn Slide- {
	sliden=`{echo $sliden^'-1' | bc}
	loadordie
}

fn Get {
	newdir=$%
	newsliden=`{basename `{winread tag | awk '{print $1}'}}
	if (~ $newsliden '') echo $prog': '$newdir' is a directory' >[1=2]
	if not if (echo $newsliden | 9 grep -vs '^[0-9]+$') echo $prog': non-numerical filename '''$newsliden'''' >[1=2]
	if not {
		dir=$newdir
		sliden=$newsliden
		loadordie
	}
}

## event loop
fn event {
	switch($1$2) {
	case Ml ML    # button 3 - pass back to acme
		winwriteevent $*
	case Mx MX
	{
		switch($9) {
		case Slide+ Slide- Get
			$9 $*
		case *
		{
			if (ismacro $9) execmacro $9
			if not winwriteevent $*
		}
		}
	}
	}
}

## main
if (! test -r $dir^$sliden) {
	echo $prog': could not find slide '$dir^$sliden >[1=2]
	exit 1
}

init
loadordie
wineventloop
