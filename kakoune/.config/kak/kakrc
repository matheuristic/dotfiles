# $HOME/.config/kak/kakrc - Kakoune config file

# Don't show an assistant graphic
set-option global ui_options ncurses_assistant=none
# When exiting insert, don't automatically remove trailing whitespace
# See https://github.com/mawww/kakoune/issues/2175
set-option global disabled_hooks .*-trim-indent

# Line numbers
add-highlighter global/number-lines number-lines -hlcursor
# Highlight FIXME/TODO/XXX keywords
add-highlighter global/fixme-todo-xxx regex \b(TODO|FIXME|XXX|NOTE)\b 0:default+rb
# Highlight trailing whitespace
add-highlighter global/trailing-whitespace regex \h+$ 0:Error
# Wrap long lines
add-highlighter global/wrap wrap -word -indent

# Colorscheme
colorscheme gruvbox

# <tab>/<s-tab> for insert completion selection (consistent with command line)
# Use <C-v><tab> to insert a tab character
hook global InsertCompletionShow .* %{   map window insert <tab> <c-n>;   map window insert <s-tab> <c-p> }
hook global InsertCompletionHide .* %{ unmap window insert <tab> <c-n>; unmap window insert <s-tab> <c-p> }

# IDE setup, see https://github.com/mawww/kakoune/wiki/IDE
# Start the editor using "kak -e ide" to call this automatically
define-command ide \
    -params 0..1 \
    -docstring "Launch IDE window configuration" \
%{
    try %{ rename-session %arg{1} }

    rename-client main
    set global jumpclient main

    new rename-client tools
    set global toolsclient tools

    # new rename-client docs
    # set global docsclient docs

    repl-new

    nop %sh{
        if [ "$TMUX" != "" ]; then
            tmux select-layout main-vertical
            tmux select-pane -t 0
        fi
    }
}

# Remove trailing whitespace, from https://github.com/occivink/config
define-command remove-trailing-whitespace \
    -params 0 \
    -docstring "Remove trailing whitespace in buffer" \
%{
    try %{
        execute-keys -draft '%<a-s>ghgl<a-i><space>d'
        echo -markup "{Information}Removed trailing whitespace"
    } catch %{
        echo -markup "{Information}No trailing whitespace to remove"
    }
}

# Count words in selection, adapted from https://discuss.kakoune.com/t/a-simple-word-count-command/1140/3
define-command word-count \
    -params 0 \
    -docstring "Count words in selection using 'wc'" \
%{
    evaluate-commands -client %val{client} echo %sh{
        printf '%s' "$kak_selection" | wc
    }
}

declare-user-mode bufs
map global bufs g ': buffer '                            -docstring "buffer goto"
map global bufs n ': buffer-next<ret>'                   -docstring "buffer next"
map global bufs p ': buffer-previous<ret>'               -docstring "buffer prev"
map global bufs d ': delete-buffer<ret>'                 -docstring "buffer del"
map global bufs r ': rename-buffer '                     -docstring "buffer rename"
map global bufs w ': eval -draft %{ exec ''%'' ; eval word-count}<ret>' -docstring "buffer word count (wc)"
map global bufs F ': format-buffer<ret>'                 -docstring "format buffer"
map global bufs W ': remove-trailing-whitespace<ret>'    -docstring "remove trailing whitespace"
map global bufs R ': autorestore-restore-buffer<ret>'    -docstring "restore buffer backup"

declare-user-mode git
map global git b ': git blame<ret>'                      -docstring "git blame enable"
map global git B ': git hide-blame<ret>'                 -docstring "git blame disable"
map global git c ': git commit<ret>'                     -docstring "git commit"
map global git d ': git diff<ret>'                       -docstring "git diff"
map global git g ': git '                                -docstring "git prompt"
map global git l ': git log -- "%val{buffile}"<ret>'     -docstring "git log (file)"
map global git L ': git log<ret>'                        -docstring "git log (project)"
map global git s ': git status<ret>'                     -docstring "git status"
map global git t ': git diff --staged<ret>'              -docstring "git diff (staged)"
map global git w ': git add<ret>: git update-diff<ret>'  -docstring "git add and update diff"

declare-user-mode lint
map global lint l ': lint-buffer<ret>'                   -docstring 'lint buffer'
map global lint h ': lint-hide-diagnostics<ret>'         -docstring 'lint hide diagnostics'
map global lint n ': lint-next-message<ret>'             -docstring 'lint next message'
map global lint p ': lint-previous-message<ret>'         -docstring 'lint prev message'
map global lint b ': b *lint-output*<ret>'               -docstring 'goto lint buffer'

declare-user-mode settings
map global settings o ': echo %opt{'                     -docstring 'echo option'
map global settings r ': echo %reg{'                     -docstring 'echo register'
map global settings v ': echo %val{'                     -docstring 'echo value'
map global settings O ': set-option '                    -docstring 'set option'
map global settings R ': set-register '                  -docstring 'set register'
map global settings <a-o> ': unset-option '              -docstring 'unset option'

declare-user-mode visual
map global visual m ': add-highlighter global/show-matching show-matching<ret>'       -docstring "show matching brackets on"
map global visual M ': remove-highlighter global/show-matching<ret>'                  -docstring "show matching brackets off"
map global visual w ': add-highlighter global/show-whitespaces show-whitespaces<ret>' -docstring "show whitespace on"
map global visual W ': remove-highlighter global/show-whitespaces<ret>'               -docstring "show whitespace off"

# REPL
map global user <a-r> ': repl-new<ret>'                      -docstring "REPL create"
map global user s ': repl-send-text<ret>'                    -docstring "REPL send text"
# Window system clipboard integration
map global user y "<a-|>%val{config}/bin/clip-copy.sh<ret>"  -docstring "clip-yank"
map global user P "!%val{config}/bin/clip-paste.sh<ret>"     -docstring "clip-paste before"
map global user p "<a-!>%val{config}/bin/clip-paste.sh<ret>" -docstring "clip-paste after"
map global user R "|%val{config}/bin/clip-paste.sh<ret>"     -docstring "clip-replace"
# Other
map global user c ': comment-line<ret>'                      -docstring "(un)comment sel using line comments"
map global user C ': comment-block<ret>'                     -docstring "(un)comment sel using block comments"
map global user e ': evaluate-commands %val{selection}<ret>' -docstring "evaluate region as kakoune commands"
map global user q '|fmt --width 80<ret>'                     -docstring "wrap to 80 columns"  # like 'gq' in vim
# User modes
map global user b ': enter-user-mode bufs<ret>'              -docstring "> buffers mode"
map global user g ': enter-user-mode git<ret>'               -docstring "> git mode"
map global user L ': enter-user-mode lint<ret>'              -docstring "> lint mode"
map global user S ': enter-user-mode settings<ret>'          -docstring "> settings mode"
map global user V ': enter-user-mode visual<ret>'            -docstring "> visual mode"

# Load plugins
try %{                                                # fzf.kak
    source "%val{config}/plugins/fzf.kak/rc/fzf.kak"  # base module
    evaluate-commands %sh{                            # extension modules
        # See https://github.com/mawww/kakoune/blob/master/doc/pages/expansions.asciidoc
        # for shell expansions
        find -L "$kak_config/plugins/fzf.kak/rc/modules/" -name '*.kak' -exec printf 'source "%s"\n' {} \;
    }
    # Use rg and bat for file find and preview
    hook global ModuleLoaded fzf %{
        evaluate-commands %sh{
            if command -v rg > /dev/null 2>&1; then
                printf "set global fzf_file_command 'rg'\n"
            fi
            if command -v bat > /dev/null 2>&1; then
                printf "set global fzf_highlight_command 'bat'\n"
            fi
        }
    }
    map global user f ': fzf-mode<ret>'                  -docstring "> fzf"
}

# LSP support
try %{
    eval %sh{kak-lsp --kakoune -s $kak_session}          # Not needed if you load it with plug.kak.
    lsp-enable
    # Entry point from user mode
    map global user l ': enter-user-mode lsp<ret>'       -docstring '> lsp mode'
    # Extra mappings in lsp mode
    map global lsp  <a-s> ': lsp-start<ret>'             -docstring 'start session'
    map global lsp  <a-d> ': lsp-disable<ret>'           -docstring 'disable kak-lsp'
    map global lsp  <a-e> ': lsp-enable<ret>'            -docstring 'enable kak-lsp'
}

# nnn support as a side bar file explorer
try %{
    define-command browse-nnn %{
        repl-new "EDITOR='%val{config}/bin/kak-edit-in-sess.sh %val{client} %val{session}' NNN_USE_EDITOR=1 nnn -RHeo"
        # Resize nnn pane to width 30 if larger than that
        nop %sh{
            targetWidth=30
            if [ "$TMUX" != "" ]; then
                tmux swap-pane -s 0 -t 1
                tmux select-pane -t 0
                currentWidth=$(tmux run 'printf "#{pane_width}"')
                if [ $currentWidth -gt $targetWidth ]; then
                    resizeNum=$(expr $currentWidth - $targetWidth)
                    tmux resize-pane -t 0 -L $resizeNum
                fi
            fi
        }
    }
    map global user n ': browse-nnn<ret>' -docstring 'browse files with nnn'
}

# Load separate Kakoune config files
try %{ source "%val{config}/rc/j.kak" }                  # J language
try %{ source "%val{config}/rc/sh.kak" }                 # bash/sh shell scripts

# Load machine-local and directory-local Kakoune config file
hook global BufCreate (.*/)?(\.?kakrc\.local) %{
    set-option buffer filetype kak
}
# Machine-local config file - $HOME/.config/kak/kakrc.local
try %{ source "%val{config}/kakrc.local" }
# Directory-local config file (e.g. for projects) - .kakrc.local
try %{ source .kakrc.local }
